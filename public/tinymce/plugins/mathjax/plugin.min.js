tinymce.PluginManager.add("mathjax", function (editor) {
  // Load CSS file
  editor.on("init", function () {
    const link = document.createElement("link");
    link.rel = "stylesheet";
    link.type = "text/css";
    link.href = editor.documentBaseURI.toAbsolute(
      "plugins/mathjax/plugin.min.css"
    );
    editor.getDoc().head.appendChild(link);
  });

  // --- MathJax Render Helpers ---
  function removeMathJaxOutput(el) {
    const latex = decodeURIComponent(el.getAttribute("data-latex") || "");
    let mode = "inline";
    if (el.classList.contains("math-tex-block")) {
      mode = "block";
    }
    el.innerHTML = wrapLatex(latex, mode);
  }

  // --- Detect Math Mode ---
  function detectMathMode(latex) {
    const trimmed = latex.trim();
    // Nhận diện tất cả các environment block phổ biến của MathJax/LaTeX
    if (
      trimmed.includes("\n") ||
      /^\\\[([\s\S]*)\\\]$/s.test(trimmed) ||
      /^\$\$([\s\S]*)\$\$$/s.test(trimmed) ||
      /\\begin\{(align\*?|gather\*?|multline\*?|cases|array|eqnarray|pmatrix|bmatrix|vmatrix|Vmatrix|matrix|split|flalign\*?|alignat\*?)\}/.test(
        trimmed
      )
    ) {
      return "block";
    }
    return "inline";
  }

  function renderMath() {
    const elements = editor.getBody().querySelectorAll(".math-tex");
    elements.forEach((el) => {
      removeMathJaxOutput(el);
      if (window.MathJax && window.MathJax.typesetPromise) {
        window.MathJax.typesetPromise([el]).catch((err) => {
          console.error("MathJax rendering error:", err);
        });
      }
    });
  }

  // --- Clean up empty paragraphs above block math ---
  function cleanEmptyParagraphsAboveBlock() {
    const body = editor.getBody();
    const blocks = body.querySelectorAll(
      'p > span.math-tex[contenteditable="false"]'
    );
    blocks.forEach((block) => {
      const p = block.closest("p");
      if (
        p &&
        p.previousElementSibling &&
        p.previousElementSibling.tagName === "P"
      ) {
        const prev = p.previousElementSibling;
        if (
          !prev.textContent.trim() ||
          prev.innerHTML.trim() === "<br>" ||
          prev.innerHTML.trim() === "&#8203;"
        ) {
          prev.remove();
        }
      }
    });
  }

  // --- LaTeX Wrapping/Unwrapping ---
  function stripLatexWrappers(latex) {
    let trimmed = latex.trim();
    // Loại bỏ các dòng chỉ chứa \[ hoặc \] hoặc $$
    trimmed = trimmed
      .replace(/^(\\\[|\\\(|\$\$)\s*$/m, "")
      .replace(/^\s*(\\\]|\\\)|\$\$)$/m, "");
    // Loại bỏ bọc block/inline ở đầu/cuối (dù lặp nhiều lần, kể cả nhiều dòng)
    while (
      /^\\\[(.|\n)+\\\]$/.test(trimmed) ||
      /^\\\((.|\n)+\\\)$/.test(trimmed) ||
      /^\$\$(.|\n)+\$\$$/.test(trimmed)
    ) {
      trimmed = trimmed
        .replace(/^\\\[(.|\n)+\\\]$/, (m) => m.slice(2, -2).trim())
        .replace(/^\\\((.|\n)+\\\)$/, (m) => m.slice(2, -2).trim())
        .replace(/^\$\$(.|\n)+\$\$$/, (m) => m.slice(2, -2).trim());
    }
    return trimmed;
  }

  function wrapLatex(latex, mode) {
    let trimmed = stripLatexWrappers(latex);
    // Nếu đã có bọc đúng kiểu, giữ nguyên
    if (
      (mode === "block" &&
        (/^\\\[([\s\S]*)\\\]$/.test(trimmed) ||
          /^\$\$([\s\S]*)\$\$$/.test(trimmed))) ||
      (mode === "inline" && /^\\\(([\s\S]*)\\\)$/.test(trimmed))
    ) {
      return trimmed;
    }
    // Sau khi loại bỏ, bọc lại đúng kiểu
    if (mode === "block") return "\\[" + trimmed + "\\]";
    return "\\(" + trimmed + "\\)";
  }

  // --- Math Preview ---
  function renderPreview(preview, latex) {
    if (!preview) return;
    preview.className = "mathjax-preview";
    try {
      const mode = detectMathMode(latex || "");
      preview.innerHTML = wrapLatex(latex || "", mode);
      if (window.MathJax && window.MathJax.typesetPromise) {
        window.MathJax.typesetPromise([preview]).catch(function (err) {
          preview.innerHTML =
            '<span style="color:#dc2626">Invalid LaTeX: ' +
            err.message +
            "</span>";
        });
      }
    } catch (e) {
      preview.innerHTML = '<span style="color:#dc2626">Invalid LaTeX</span>';
    }
  }

  // --- Popup UI helpers ---
  function createMathPopup({ latex, mode, onSubmit, onCancel, anchorEl }) {
    removeMathPopup();
    const popup = document.createElement("div");
    popup.className = "mathjax-popup";
    popup.style.position = "absolute";
    popup.style.zIndex = 99999;
    popup.style.background = "#fff";
    popup.style.border = "1px solid #e5e7eb";
    popup.style.borderRadius = "12px";
    popup.style.boxShadow = "0 8px 32px rgba(0,0,0,0.12)";
    popup.style.padding = "0";
    popup.style.minWidth = "640px";
    popup.style.maxWidth = "800px";
    popup.style.width = "640px";
    popup.style.maxHeight = "90vh";
    popup.style.display = "flex";
    popup.style.flexDirection = "column";
    popup.style.gap = "0";

    // Header
    const header = document.createElement("div");
    header.style.padding = "12px 16px";
    header.style.borderBottom = "1px solid #e5e7eb";
    header.style.display = "flex";
    header.style.justifyContent = "space-between";
    header.style.alignItems = "center";
    header.style.background = "#f9fafb";
    header.style.borderTopLeftRadius = "12px";
    header.style.borderTopRightRadius = "12px";

    const title = document.createElement("div");
    title.textContent = "Insert Math Equation";
    title.style.fontWeight = "600";
    title.style.fontSize = "1.1em";
    title.style.color = "#111827";

    const closeBtn = document.createElement("button");
    closeBtn.innerHTML = "×";
    closeBtn.style.background = "none";
    closeBtn.style.border = "none";
    closeBtn.style.fontSize = "1.5em";
    closeBtn.style.color = "#6b7280";
    closeBtn.style.cursor = "pointer";
    closeBtn.style.padding = "4px 8px";
    closeBtn.style.borderRadius = "4px";
    closeBtn.style.lineHeight = "1";
    closeBtn.onmouseover = () => (closeBtn.style.color = "#dc2626");
    closeBtn.onmouseout = () => (closeBtn.style.color = "#6b7280");
    closeBtn.onclick = () => {
      onCancel && onCancel();
      removeMathPopup();
    };

    header.appendChild(title);
    header.appendChild(closeBtn);

    // Content container
    const content = document.createElement("div");
    content.style.padding = "16px";
    content.style.display = "flex";
    content.style.flexDirection = "column";
    content.style.gap = "12px";

    // Input container
    const inputContainer = document.createElement("div");
    inputContainer.style.display = "flex";
    inputContainer.style.flexDirection = "column";
    inputContainer.style.gap = "4px";

    const inputLabel = document.createElement("label");
    inputLabel.textContent = "LaTeX Equation";
    inputLabel.style.fontWeight = "500";
    inputLabel.style.color = "#374151";
    inputLabel.style.fontSize = "0.95em";

    const input = document.createElement("textarea");
    input.value = latex || "";
    input.style.width = "100%";
    input.style.minHeight = "80px";
    input.style.maxHeight = "400px";
    input.style.fontSize = "1.2em";
    input.style.fontFamily = "monospace";
    input.style.padding = "12px 16px";
    input.style.border = "1px solid #e5e7eb";
    input.style.borderRadius = "6px";
    input.style.background = "#f9fafb";
    input.style.transition = "all 0.2s";
    input.autofocus = true;
    input.style.resize = "vertical";
    input.style.overflowY = "auto";
    input.wrap = "soft";

    // Đặt logic tăng chiều cao vào setTimeout để đảm bảo textarea đã render xong
    setTimeout(() => {
      input.style.height = "auto";
      input.style.height = Math.min(input.scrollHeight, 400) + "px";
    }, 0);

    input.onfocus = () => {
      input.style.borderColor = "#409eff";
      input.style.background = "#fff";
      input.style.boxShadow = "0 0 0 2px rgba(64,158,255,0.2)";
    };
    input.onblur = () => {
      input.style.borderColor = "#e5e7eb";
      input.style.background = "#f9fafb";
      input.style.boxShadow = "none";
    };

    // Tự động tăng chiều cao theo nội dung
    input.addEventListener("input", function () {
      this.style.height = "auto";
      this.style.height = Math.min(this.scrollHeight, 400) + "px";
    });

    inputContainer.appendChild(inputLabel);
    inputContainer.appendChild(input);

    // Mode toggle
    const modeContainer = document.createElement("div");
    modeContainer.style.display = "flex";
    modeContainer.style.alignItems = "center";
    modeContainer.style.gap = "8px";

    const modeLabel = document.createElement("span");
    modeLabel.textContent = "Mode:";
    modeLabel.style.fontWeight = "500";
    modeLabel.style.color = "#374151";
    modeLabel.style.fontSize = "0.95em";

    const modeBtn = document.createElement("button");
    modeBtn.type = "button";
    modeBtn.textContent = mode === "block" ? "Display mode" : "Inline mode";
    modeBtn.style.background = "#f3f4f6";
    modeBtn.style.border = "1px solid #e5e7eb";
    modeBtn.style.borderRadius = "6px";
    modeBtn.style.padding = "6px 12px";
    modeBtn.style.cursor = "pointer";
    modeBtn.style.fontWeight = "500";
    modeBtn.style.fontSize = "0.95em";
    modeBtn.style.color = "#374151";
    modeBtn.style.transition = "all 0.2s";
    let currentMode = mode;

    modeBtn.onmouseover = () => {
      modeBtn.style.background = "#e5e7eb";
    };
    modeBtn.onmouseout = () => {
      modeBtn.style.background = "#f3f4f6";
    };
    modeBtn.onclick = () => {
      currentMode = currentMode === "block" ? "inline" : "block";
      modeBtn.textContent =
        currentMode === "block" ? "Display mode" : "Inline mode";
      renderPreview();
    };

    modeContainer.appendChild(modeLabel);
    modeContainer.appendChild(modeBtn);

    // Preview
    const previewContainer = document.createElement("div");
    previewContainer.style.display = "flex";
    previewContainer.style.flexDirection = "column";
    previewContainer.style.gap = "4px";

    const previewLabel = document.createElement("label");
    previewLabel.textContent = "Preview";
    previewLabel.style.fontWeight = "500";
    previewLabel.style.color = "#374151";
    previewLabel.style.fontSize = "0.95em";

    const preview = document.createElement("div");
    preview.className = "mathjax-popup-preview";
    preview.style.background = "#f9fafb";
    preview.style.padding = "24px";
    preview.style.borderRadius = "6px";
    preview.style.minHeight = "80px";
    preview.style.textAlign = "center";
    preview.style.fontSize = "1.4em";
    preview.style.border = "1px solid #e5e7eb";

    previewContainer.appendChild(previewLabel);
    previewContainer.appendChild(preview);

    // Footer
    const footer = document.createElement("div");
    footer.style.padding = "12px 16px";
    footer.style.borderTop = "1px solid #e5e7eb";
    footer.style.display = "flex";
    footer.style.justifyContent = "space-between";
    footer.style.alignItems = "center";
    footer.style.background = "#f9fafb";
    footer.style.borderBottomLeftRadius = "12px";
    footer.style.borderBottomRightRadius = "12px";

    const shortcuts = document.createElement("div");
    shortcuts.style.fontSize = "0.85em";
    shortcuts.style.color = "#6b7280";
    shortcuts.innerHTML =
      "Press <kbd>Enter</kbd> to save, <kbd>Esc</kbd> to cancel";

    const btnRow = document.createElement("div");
    btnRow.style.display = "flex";
    btnRow.style.gap = "8px";

    const cancelBtn = document.createElement("button");
    cancelBtn.type = "button";
    cancelBtn.textContent = "Cancel";
    cancelBtn.style.background = "#fff";
    cancelBtn.style.color = "#374151";
    cancelBtn.style.border = "1px solid #e5e7eb";
    cancelBtn.style.borderRadius = "6px";
    cancelBtn.style.padding = "8px 16px";
    cancelBtn.style.fontSize = "0.95em";
    cancelBtn.style.fontWeight = "500";
    cancelBtn.style.cursor = "pointer";
    cancelBtn.style.transition = "all 0.2s";
    cancelBtn.onmouseover = () => {
      cancelBtn.style.background = "#f3f4f6";
    };
    cancelBtn.onmouseout = () => {
      cancelBtn.style.background = "#fff";
    };
    cancelBtn.onclick = () => {
      onCancel && onCancel();
      removeMathPopup();
    };

    const okBtn = document.createElement("button");
    okBtn.type = "button";
    okBtn.textContent = "Insert";
    okBtn.style.background = "#409eff";
    okBtn.style.color = "#fff";
    okBtn.style.border = "none";
    okBtn.style.borderRadius = "6px";
    okBtn.style.padding = "8px 16px";
    okBtn.style.fontSize = "0.95em";
    okBtn.style.fontWeight = "500";
    okBtn.style.cursor = "pointer";
    okBtn.style.transition = "all 0.2s";
    okBtn.onmouseover = () => {
      okBtn.style.background = "#3b82f6";
    };
    okBtn.onmouseout = () => {
      okBtn.style.background = "#409eff";
    };
    okBtn.onclick = () => {
      // Luôn detect lại mode từ nội dung latex
      const detectedMode = detectMathMode(input.value);
      onSubmit(input.value, detectedMode);
      removeMathPopup();
    };

    btnRow.appendChild(cancelBtn);
    btnRow.appendChild(okBtn);

    footer.appendChild(shortcuts);
    footer.appendChild(btnRow);

    // Render preview
    function renderPreview() {
      preview.innerHTML = "";
      try {
        preview.innerHTML = wrapLatex(input.value, currentMode);
        if (window.MathJax && window.MathJax.typesetPromise) {
          window.MathJax.typesetPromise([preview]).catch(function (err) {
            preview.innerHTML =
              '<span style="color:#dc2626">Invalid LaTeX: ' +
              err.message +
              "</span>";
          });
        }
      } catch (e) {
        preview.innerHTML = '<span style="color:#dc2626">Invalid LaTeX</span>';
      }
    }
    input.oninput = renderPreview;
    renderPreview();

    // Keyboard shortcuts
    input.onkeydown = (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        // Luôn detect lại mode từ nội dung latex
        const detectedMode = detectMathMode(input.value);
        onSubmit(input.value, detectedMode);
        removeMathPopup();
      } else if (e.key === "Escape") {
        e.preventDefault();
        onCancel && onCancel();
        removeMathPopup();
      }
    };

    // Compose popup
    content.appendChild(inputContainer);
    content.appendChild(modeContainer);
    content.appendChild(previewContainer);
    popup.appendChild(header);
    popup.appendChild(content);
    popup.appendChild(footer);
    document.body.appendChild(popup);

    // Position popup ở giữa màn hình
    setTimeout(() => {
      const left = (window.innerWidth - popup.offsetWidth) / 2;
      const top = (window.innerHeight - popup.offsetHeight) / 2;
      popup.style.left = left + "px";
      popup.style.top = top + "px";
    }, 0);

    // Close popup when click outside
    function onDocClick(e) {
      if (!popup.contains(e.target)) {
        removeMathPopup();
      }
    }
    setTimeout(() => document.addEventListener("mousedown", onDocClick), 0);
    popup._onDocClick = onDocClick;
    input.focus();
  }
  function removeMathPopup() {
    const old = document.querySelector(".mathjax-popup");
    if (old) {
      document.removeEventListener("mousedown", old._onDocClick);
      old.remove();
    }
  }

  // Loại bỏ BOM, ký tự Unicode lạ ở đầu/cuối
  function cleanLatex(latex) {
    return latex
      .replace(/^[\uFEFF\u200B\u200C\u200D\u202A-\u202E]+/, "")
      .replace(/[\uFEFF\u200B\u200C\u200D\u202A-\u202E]+$/, "");
  }

  // Chỉ lấy phần nằm trong block math
  function extractBlockLatex(latex) {
    // Ưu tiên lấy phần trong \[ ... \], $$...$$, hoặc \begin{...}...\end{...}
    const blockMatch = latex.match(
      /(\\\[([\s\S]*?)\\\]|\$\$([\s\S]*?)\$\$|\\begin\{[a-zA-Z*]+\}([\s\S]*?)\\end\{[a-zA-Z*]+\})/
    );
    if (blockMatch) return blockMatch[0];
    return latex;
  }

  // --- Insert Math into Editor ---
  function insertMath(latex, mode) {
    latex = cleanLatex(latex);
    latex = extractBlockLatex(latex);
    mode = mode || detectMathMode(latex);
    const encoded = encodeURIComponent(latex);
    if (mode === "block") {
      const rng = editor.selection.getRng();
      let handled = false;
      if (
        rng &&
        rng.startContainer === rng.endContainer &&
        rng.startContainer.nodeType === 3 &&
        rng.startOffset !== 0 &&
        rng.startOffset !== rng.startContainer.nodeValue.length
      ) {
        // Đang ở giữa text node, tách đoạn bằng TinyMCE API
        const text = rng.startContainer.nodeValue;
        const before = text.slice(0, rng.startOffset);
        const after = text.slice(rng.startOffset);
        // Xóa text node cũ
        rng.startContainer.nodeValue = "";
        // Chèn đoạn trước (nếu có)
        if (before) editor.insertContent("<div>" + before + "</div>");
        // Chèn block math
        editor.insertContent(
          '<div class="math-tex math-tex-block" contenteditable="false" data-latex="' +
            encoded +
            '">' +
            wrapLatex(latex, mode) +
            "</div>"
        );
        // Chèn đoạn sau (nếu có)
        if (after) editor.insertContent("<div>" + after + "</div>");
        renderMath();
        return;
      }
      // Bình thường
      editor.insertContent(
        '<div class="math-tex math-tex-block" contenteditable="false" data-latex="' +
          encoded +
          '">' +
          wrapLatex(latex, mode) +
          "</div>"
      );
      setTimeout(() => {
        const body = editor.getBody();
        const blocks = body.querySelectorAll(
          'div.math-tex-block[contenteditable="false"]'
        );
        blocks.forEach((block) => {
          let parent = block.parentElement;
          while (parent && parent !== body && parent.tagName !== "DIV") {
            parent.after(block);
            if (
              ["SPAN", "FONT", "B", "I", "U", "EM", "STRONG", "MARK"].includes(
                parent.tagName
              ) &&
              !parent.textContent.trim() &&
              parent.childElementCount === 0
            ) {
              parent.remove();
            }
            parent = block.parentElement;
          }
        });
      }, 0);
    } else {
      // Inline math như cũ
      const mathSpan =
        '<span class="math-tex" contenteditable="false" data-latex="' +
        encoded +
        '">' +
        wrapLatex(latex, mode) +
        "</span>";
      editor.insertContent(mathSpan);
      setTimeout(() => {
        const body = editor.getBody();
        const spans = body.querySelectorAll(
          'span.math-tex[contenteditable="false"]'
        );
        spans.forEach((span) => {
          let parent = span.parentElement;
          while (
            parent &&
            parent.tagName === "SPAN" &&
            parent !== body &&
            !parent.classList.contains("math-tex")
          ) {
            parent.after(span);
            if (!parent.textContent.trim() && parent.childElementCount === 0) {
              parent.remove();
            }
            parent = span.parentElement;
          }
        });
      }, 0);
    }
    renderMath();
  }

  // --- Toolbar Button ---
  editor.ui.registry.addButton("mathjax", {
    icon: "mathfx",
    tooltip: "Math",
    onAction: function () {
      createMathPopup({
        latex: "",
        mode: "inline",
        anchorEl: editor.selection.getNode(),
        onSubmit: function (latex, mode) {
          insertMath(latex, mode);
        },
        onCancel: function () {},
      });
    },
  });

  // Đăng ký SVG icon f(x)
  editor.ui.registry.addIcon(
    "mathfx",
    '<svg width="24" height="24" focusable="false"><path fill-rule="evenodd" clip-rule="evenodd" d="M9 4.8c.1-.5.5-.8 1-.8h10a1 1 0 1 1 0 2h-9.2L8.3 19.2a1 1 0 0 1-1.7.4l-3.4-4.2a1 1 0 0 1 1.6-1.2l2 2.5L9 4.8Zm9.7 5.5c.4.4.4 1 0 1.4L17 13.5l1.8 1.8a1 1 0 1 1-1.4 1.4L15.5 15l-1.8 1.8a1 1 0 0 1-1.4-1.4l1.8-1.8-1.8-1.8a1 1 0 0 1 1.4-1.4l1.8 1.8 1.8-1.8a1 1 0 0 1 1.4 0Z"></path></svg>'
  );

  // --- Click to Edit Math ---
  editor.on("dblclick", function (e) {
    let target = e.target;
    const mathTex = target.closest && target.closest(".math-tex");
    if (mathTex) {
      let latex = decodeURIComponent(mathTex.getAttribute("data-latex") || "");
      let mode = detectMathMode(latex);
      createMathPopup({
        latex,
        mode,
        anchorEl: mathTex,
        onSubmit: function (latex, mode) {
          let newNode;
          if (mode === "block") {
            newNode = document.createElement("div");
            newNode.className = "math-tex math-tex-block";
          } else {
            newNode = document.createElement("span");
            newNode.className = "math-tex";
          }
          newNode.setAttribute("contenteditable", "false");
          newNode.setAttribute("data-latex", encodeURIComponent(latex));
          newNode.innerHTML = wrapLatex(latex, mode);
          mathTex.replaceWith(newNode);
          renderMath();
        },
        onCancel: function () {},
      });
    }
  });
});
