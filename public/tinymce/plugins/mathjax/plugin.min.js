tinymce.PluginManager.add("mathjax", function (editor) {
  // Inject CSS vào editor
  editor.on("init", function () {
    const style = document.createElement("style");
    style.textContent = `
      /* MathJax preview styling */
      .mathjax-preview {
        background: #f9fafb;
        padding: 16px;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
        margin-top: 8px;
        text-align: center;
        min-height: 40px;
        font-size: 1.5rem;
        color: #222;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .mathjax-preview .mjx-chtml {
        font-family: 'Latin Modern Math', 'STIX Math', 'Cambria Math', 'Times New Roman', serif !important;
      }

      span.math-tex {
        font-family: 'Latin Modern Math', 'STIX Math', 'Cambria Math', 'Times New Roman', serif !important;
      }

      /* Block math styling kế thừa căn lề đoạn */
      p > .math-tex {
        display: block !important;
        text-align: inherit !important;
        margin: 0 !important;
      }
      p > .math-tex .mjx-chtml {
        margin: 0 !important;
        display: block !important;
        text-align: inherit !important;
      }
      /* Căn giữa block math khi đoạn căn giữa */
      p[style*="text-align: center"] > .math-tex,
      p[style*="text-align: center"] > .math-tex .mjx-chtml {
        margin-left: auto !important;
        margin-right: auto !important;
        text-align: center !important;
      }
      /* Căn phải block math khi đoạn căn phải */
      p[style*="text-align: right"] > .math-tex,
      p[style*="text-align: right"] > .math-tex .mjx-chtml {
        margin-left: auto !important;
        margin-right: 0 !important;
        text-align: right !important;
      }
      /* Căn trái block math khi đoạn căn trái */
      p[style*="text-align: left"] > .math-tex,
      p[style*="text-align: left"] > .math-tex .mjx-chtml {
        margin-left: 0 !important;
        margin-right: auto !important;
        text-align: left !important;
      }
      /* Inline math kế thừa text-align đoạn */
      p[style*="text-align: center"] span.math-tex,
      p[style*="text-align: right"] span.math-tex,
      p[style*="text-align: left"] span.math-tex {
        text-align: inherit !important;
      }
    `;
    editor.getDoc().head.appendChild(style);
  });

  // --- MathJax Render Helpers ---
  function removeMathJaxOutput(el) {
    // Reset style của node math-tex
    el.removeAttribute("style");

    // Reset style của parent paragraph nếu có
    const parentP = el.closest("p");
    if (parentP) {
      parentP.removeAttribute("style");
    }

    // Xóa tất cả output cũ của MathJax trong node này
    el.querySelectorAll(".mjx-chtml, .mjx-math").forEach((n) => {
      n.remove();
      // Reset style của các node con
      n.removeAttribute("style");
    });
  }

  // --- Detect Math Mode ---
  function detectMathMode(latex) {
    const trimmed = latex.trim();
    if (
      trimmed.includes("\n") ||
      /^\\\[([\s\S]*)\\\]$/s.test(trimmed) ||
      /^\$\$([\s\S]*)\$\$$/s.test(trimmed)
    ) {
      return "block";
    }
    return "inline";
  }

  function renderMath() {
    const elements = editor.getBody().querySelectorAll("span.math-tex");
    elements.forEach((el) => {
      removeMathJaxOutput(el);
      if (window.MathJax && window.MathJax.typesetPromise) {
        window.MathJax.typesetPromise([el]).catch((err) => {
          console.error("MathJax rendering error:", err);
        });
      }
    });
  }

  // --- Clean up empty paragraphs above block math ---
  function cleanEmptyParagraphsAboveBlock() {
    const body = editor.getBody();
    const blocks = body.querySelectorAll(
      'p > span.math-tex[contenteditable="false"]'
    );
    blocks.forEach((block) => {
      const p = block.closest("p");
      if (
        p &&
        p.previousElementSibling &&
        p.previousElementSibling.tagName === "P"
      ) {
        const prev = p.previousElementSibling;
        if (
          !prev.textContent.trim() ||
          prev.innerHTML.trim() === "<br>" ||
          prev.innerHTML.trim() === "&#8203;"
        ) {
          prev.remove();
        }
      }
    });
  }

  // --- LaTeX Wrapping/Unwrapping ---
  function stripLatexWrappers(latex) {
    let trimmed = latex.trim();
    // Loại bỏ các dòng chỉ chứa \[ hoặc \] hoặc $$
    trimmed = trimmed
      .replace(/^(\\\[|\\\(|\$\$)\s*$/m, "")
      .replace(/^\s*(\\\]|\\\)|\$\$)$/m, "");
    // Loại bỏ bọc block/inline ở đầu/cuối (dù lặp nhiều lần, kể cả nhiều dòng)
    while (
      /^\\\[(.|\n)+\\\]$/.test(trimmed) ||
      /^\\\((.|\n)+\\\)$/.test(trimmed) ||
      /^\$\$(.|\n)+\$\$$/.test(trimmed)
    ) {
      trimmed = trimmed
        .replace(/^\\\[(.|\n)+\\\]$/, (m) => m.slice(2, -2).trim())
        .replace(/^\\\((.|\n)+\\\)$/, (m) => m.slice(2, -2).trim())
        .replace(/^\$\$(.|\n)+\$\$$/, (m) => m.slice(2, -2).trim());
    }
    return trimmed;
  }

  function wrapLatex(latex, mode) {
    let trimmed = stripLatexWrappers(latex);
    // Nếu đã có bọc đúng kiểu, giữ nguyên
    if (
      (mode === "block" &&
        (/^\\\[([\s\S]*)\\\]$/.test(trimmed) ||
          /^\$\$([\s\S]*)\$\$$/.test(trimmed))) ||
      (mode === "inline" && /^\\\(([\s\S]*)\\\)$/.test(trimmed))
    ) {
      return trimmed;
    }
    // Sau khi loại bỏ, bọc lại đúng kiểu
    if (mode === "block") return "\\[" + trimmed + "\\]";
    return "\\(" + trimmed + "\\)";
  }

  // --- Math Preview ---
  function renderPreview(preview, latex) {
    if (!preview) return;
    preview.className = "mathjax-preview";
    try {
      const mode = detectMathMode(latex || "");
      preview.innerHTML = wrapLatex(latex || "", mode);
      if (window.MathJax && window.MathJax.typesetPromise) {
        window.MathJax.typesetPromise([preview]).catch(function (err) {
          preview.innerHTML =
            '<span style="color:#dc2626">Invalid LaTeX: ' +
            err.message +
            "</span>";
        });
      }
    } catch (e) {
      preview.innerHTML = '<span style="color:#dc2626">Invalid LaTeX</span>';
    }
  }

  // --- Popup UI helpers ---
  function createMathPopup({ latex, mode, onSubmit, onCancel, anchorEl }) {
    removeMathPopup();
    const popup = document.createElement("div");
    popup.className = "mathjax-popup";
    popup.style.position = "absolute";
    popup.style.zIndex = 99999;
    popup.style.background = "#fff";
    popup.style.border = "1px solid #e5e7eb";
    popup.style.borderRadius = "8px";
    popup.style.boxShadow = "0 4px 24px rgba(0,0,0,0.12)";
    popup.style.padding = "16px";
    popup.style.minWidth = "220px";
    popup.style.maxWidth = "420px";
    popup.style.width = anchorEl
      ? Math.min(anchorEl.offsetWidth, 420) + "px"
      : "340px";
    popup.style.maxHeight = "80vh";
    popup.style.display = "flex";
    popup.style.flexDirection = "column";
    popup.style.gap = "8px";

    // Input
    const input = document.createElement("textarea");
    input.value = latex || "";
    input.style.width = "100%";
    input.style.height = "40px";
    input.style.fontSize = "1.1em";
    input.style.fontFamily = "monospace";
    input.style.padding = "8px";
    input.style.border = "1px solid #e5e7eb";
    input.style.borderRadius = "4px";
    input.autofocus = true;
    input.style.resize = "vertical";

    // Mode toggle
    const modeBtn = document.createElement("button");
    modeBtn.type = "button";
    modeBtn.textContent = mode === "block" ? "Display mode" : "Inline mode";
    modeBtn.style.background = "#f3f4f6";
    modeBtn.style.border = "none";
    modeBtn.style.borderRadius = "4px";
    modeBtn.style.padding = "4px 12px";
    modeBtn.style.cursor = "pointer";
    modeBtn.style.fontWeight = "bold";
    modeBtn.style.margin = "0 0 0 0";
    let currentMode = mode;
    modeBtn.onclick = () => {
      currentMode = currentMode === "block" ? "inline" : "block";
      modeBtn.textContent =
        currentMode === "block" ? "Display mode" : "Inline mode";
      renderPreview();
    };

    // Preview
    const previewLabel = document.createElement("div");
    previewLabel.textContent = "Equation preview";
    previewLabel.style.fontWeight = "bold";
    previewLabel.style.marginTop = "8px";
    const preview = document.createElement("div");
    preview.className = "mathjax-popup-preview";
    preview.style.background = "#f9fafb";
    preview.style.padding = "12px";
    preview.style.borderRadius = "6px";
    preview.style.minHeight = "32px";
    preview.style.textAlign = "center";
    preview.style.fontSize = "1.2em";
    preview.style.marginBottom = "4px";

    // Buttons
    const btnRow = document.createElement("div");
    btnRow.style.display = "flex";
    btnRow.style.justifyContent = "flex-end";
    btnRow.style.gap = "8px";
    btnRow.style.marginTop = "8px";
    const okBtn = document.createElement("button");
    okBtn.type = "button";
    okBtn.textContent = "✔";
    okBtn.style.background = "#22c55e";
    okBtn.style.color = "#fff";
    okBtn.style.border = "none";
    okBtn.style.borderRadius = "4px";
    okBtn.style.fontSize = "1.4em";
    okBtn.style.width = "40px";
    okBtn.style.height = "40px";
    okBtn.style.cursor = "pointer";
    okBtn.style.transition = "background 0.2s";
    okBtn.onmouseover = () => (okBtn.style.background = "#16a34a");
    okBtn.onmouseout = () => (okBtn.style.background = "#22c55e");
    okBtn.onclick = () => {
      onSubmit(input.value, currentMode);
      removeMathPopup();
    };
    const cancelBtn = document.createElement("button");
    cancelBtn.type = "button";
    cancelBtn.textContent = "✖";
    cancelBtn.style.background = "#fff";
    cancelBtn.style.color = "#dc2626";
    cancelBtn.style.border = "1px solid #dc2626";
    cancelBtn.style.borderRadius = "4px";
    cancelBtn.style.fontSize = "1.4em";
    cancelBtn.style.width = "40px";
    cancelBtn.style.height = "40px";
    cancelBtn.style.cursor = "pointer";
    cancelBtn.style.transition = "background 0.2s";
    cancelBtn.onmouseover = () => (cancelBtn.style.background = "#fee2e2");
    cancelBtn.onmouseout = () => (cancelBtn.style.background = "#fff");
    cancelBtn.onclick = () => {
      onCancel && onCancel();
      removeMathPopup();
    };
    btnRow.appendChild(okBtn);
    btnRow.appendChild(cancelBtn);

    // Render preview
    function renderPreview() {
      preview.innerHTML = "";
      try {
        preview.innerHTML = wrapLatex(input.value, currentMode);
        if (window.MathJax && window.MathJax.typesetPromise) {
          window.MathJax.typesetPromise([preview]).catch(function (err) {
            preview.innerHTML =
              '<span style="color:#dc2626">Invalid LaTeX: ' +
              err.message +
              "</span>";
          });
        }
      } catch (e) {
        preview.innerHTML = '<span style="color:#dc2626">Invalid LaTeX</span>';
      }
    }
    input.oninput = renderPreview;
    renderPreview();

    // Compose popup
    popup.appendChild(input);
    const hint = document.createElement("div");
    hint.textContent = "Insert equation in TeX format.";
    hint.style.fontSize = "0.95em";
    hint.style.color = "#888";
    hint.style.margin = "2px 0 2px 0";
    popup.appendChild(hint);
    popup.appendChild(modeBtn);
    popup.appendChild(previewLabel);
    popup.appendChild(preview);
    popup.appendChild(btnRow);
    document.body.appendChild(popup);

    // Position popup: luôn căn giữa anchor (block hoặc inline)
    setTimeout(() => {
      let rect;
      if (anchorEl && anchorEl.getBoundingClientRect) {
        rect = anchorEl.getBoundingClientRect();
      } else {
        // Lấy vị trí caret trong editor
        const sel = window.getSelection && window.getSelection();
        if (sel && sel.rangeCount > 0) {
          const range = sel.getRangeAt(0).cloneRange();
          let dummy = document.createElement("span");
          // Đảm bảo dummy không ảnh hưởng layout
          dummy.style.display = "inline-block";
          dummy.style.width = "1px";
          dummy.style.height = "1em";
          dummy.style.verticalAlign = "text-bottom";
          range.collapse(true);
          range.insertNode(dummy);
          rect = dummy.getBoundingClientRect();
          dummy.parentNode.removeChild(dummy);
        } else {
          // fallback: giữa màn hình
          rect = {
            left: window.innerWidth / 2,
            top: window.innerHeight / 2,
            bottom: window.innerHeight / 2,
            width: 0,
            height: 0,
          };
        }
      }
      // Căn giữa popup theo anchor
      let left = rect.left + (rect.width - popup.offsetWidth) / 2;
      let top = rect.bottom + 8;
      // Nếu popup tràn phải, đẩy sang trái
      if (left + popup.offsetWidth > window.innerWidth - 8) {
        left = window.innerWidth - popup.offsetWidth - 8;
      }
      // Nếu popup tràn trái, đẩy sang phải
      if (left < 8) left = 8;
      // Nếu không đủ chỗ bên dưới, chuyển lên trên
      if (top + popup.offsetHeight > window.innerHeight - 8) {
        top = rect.top - popup.offsetHeight - 8;
      }
      if (top < 8) top = 8;
      popup.style.left = left + "px";
      popup.style.top = top + "px";
    }, 0);

    // Close popup when click outside
    function onDocClick(e) {
      if (!popup.contains(e.target)) {
        removeMathPopup();
      }
    }
    setTimeout(() => document.addEventListener("mousedown", onDocClick), 0);
    popup._onDocClick = onDocClick;
    input.focus();
  }
  function removeMathPopup() {
    const old = document.querySelector(".mathjax-popup");
    if (old) {
      document.removeEventListener("mousedown", old._onDocClick);
      old.remove();
    }
  }

  // --- Insert Math into Editor ---
  function insertMath(latex, mode) {
    mode = mode || detectMathMode(latex);
    const encoded = encodeURIComponent(latex);
    const mathSpan =
      '<span class="math-tex" contenteditable="false" data-latex="' +
      encoded +
      '">' +
      wrapLatex(latex, mode) +
      "</span>";
    if (mode === "block") {
      editor.insertContent("<p>" + mathSpan + "&#8203;</p>");
      setTimeout(cleanEmptyParagraphsAboveBlock, 0);
    } else {
      editor.insertContent(mathSpan);
    }
    renderMath();
  }

  // --- Toolbar Button ---
  editor.ui.registry.addButton("mathjax", {
    text: "Math",
    onAction: function () {
      createMathPopup({
        latex: "",
        mode: "inline",
        anchorEl: editor.selection.getNode(),
        onSubmit: function (latex, mode) {
          insertMath(latex, mode);
        },
        onCancel: function () {},
      });
    },
  });

  // --- Click to Edit Math ---
  editor.on("dblclick", function (e) {
    let target = e.target;
    const mathTex = target.closest && target.closest(".math-tex");
    if (mathTex) {
      let latex = decodeURIComponent(mathTex.getAttribute("data-latex") || "");
      let mode = detectMathMode(latex);
      createMathPopup({
        latex,
        mode,
        anchorEl: mathTex,
        onSubmit: function (latex, mode) {
          const newSpan = document.createElement("span");
          newSpan.className = "math-tex";
          newSpan.setAttribute("contenteditable", "false");
          newSpan.setAttribute("data-latex", encodeURIComponent(latex));
          newSpan.innerHTML = wrapLatex(latex, mode);
          if (mode === "block") {
            const p = mathTex.closest("p");
            if (p) {
              const newP = document.createElement("p");
              newP.appendChild(newSpan);
              newP.innerHTML += "&#8203;";
              p.replaceWith(newP);
              setTimeout(cleanEmptyParagraphsAboveBlock, 0);
            } else {
              mathTex.replaceWith(newSpan);
            }
          } else {
            mathTex.replaceWith(newSpan);
          }
          renderMath();
        },
        onCancel: function () {},
      });
    }
  });
});
