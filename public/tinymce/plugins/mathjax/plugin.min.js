tinymce.PluginManager.add("mathjax", function (editor) {
  function renderMath() {
    const elements = editor.getBody().querySelectorAll("span.math-tex");
    elements.forEach((el) => {
      if (!el.querySelector(".mjx-chtml")) {
        if (window.MathJax && window.MathJax.typesetPromise) {
          window.MathJax.typesetPromise([el]);
        }
      }
    });
  }
  editor.on("SetContent", renderMath);
  editor.on("Init", renderMath);

  function wrapLatex(latex, mode) {
    let trimmed = latex.trim();

    // Loại bỏ các dòng chỉ chứa \[ hoặc \] hoặc $$
    trimmed = trimmed
      .replace(/^(\\\[|\\\(|\$\$)\s*$/m, "")
      .replace(/^\s*(\\\]|\\\)|\$\$)$/m, "");

    // Loại bỏ bọc block/inline ở đầu/cuối (dù lặp nhiều lần, kể cả nhiều dòng)
    while (
      /^\\\[(.|\n)+\\\]$/.test(trimmed) ||
      /^\\\((.|\n)+\\\)$/.test(trimmed) ||
      /^\$\$(.|\n)+\$\$$/.test(trimmed)
    ) {
      trimmed = trimmed
        .replace(/^\\\[(.|\n)+\\\]$/, (m) => m.slice(2, -2).trim())
        .replace(/^\\\((.|\n)+\\\)$/, (m) => m.slice(2, -2).trim())
        .replace(/^\$\$(.|\n)+\$\$$/, (m) => m.slice(2, -2).trim());
    }

    // Nếu đã có bọc đúng kiểu, giữ nguyên
    if (
      (mode === "block" &&
        (/^\\\[([\s\S]*)\\\]$/.test(trimmed) ||
          /^\$\$([\s\S]*)\$\$$/.test(trimmed))) ||
      (mode === "inline" && /^\\\(([\s\S]*)\\\)$/.test(trimmed))
    ) {
      return trimmed;
    }

    // Sau khi loại bỏ, bọc lại đúng kiểu
    if (mode === "block") return "\\[" + trimmed + "\\]";
    return "\\(" + trimmed + "\\)";
  }

  function renderPreview(preview, latex, mode) {
    if (!preview) return;
    preview.className = "mathjax-preview";
    try {
      preview.innerHTML = wrapLatex(latex || "", mode);
      if (window.MathJax && window.MathJax.typesetPromise) {
        window.MathJax.typesetPromise([preview]).catch(function (err) {
          preview.innerHTML =
            '<span style="color:#dc2626">Invalid LaTeX: ' +
            err.message +
            "</span>";
        });
      }
    } catch (e) {
      preview.innerHTML = '<span style="color:#dc2626">Invalid LaTeX</span>';
    }
  }

  editor.ui.registry.addButton("mathjax", {
    text: "Math",
    onAction: function () {
      let previewId = "mathjax-preview-" + Date.now();
      editor.windowManager.open({
        title: "Insert Math (LaTeX)",
        body: {
          type: "panel",
          items: [
            {
              type: "textarea",
              name: "latex",
              label: "LaTeX code",
              multiline: true,
              minHeight: 60,
            },
            {
              type: "selectbox",
              name: "mode",
              label: "Math type",
              items: [
                { text: "Inline", value: "inline" },
                { text: "Block", value: "block" },
              ],
            },
            {
              type: "htmlpanel",
              html: `<div id='${previewId}'></div>`,
            },
          ],
        },
        buttons: [
          { type: "cancel", text: "Close" },
          { type: "submit", text: "Insert", primary: true },
        ],
        initialData: { latex: "", mode: "inline" },
        onChange: function (api, details) {
          if (details.name === "latex" || details.name === "mode") {
            const data = api.getData();
            const preview = document.getElementById(previewId);
            const mode = data.mode || "inline";
            renderPreview(preview, data.latex, mode);
          }
        },
        onSubmit: function (api) {
          var data = api.getData();
          const mode = data.mode || "inline";
          editor.insertContent(
            mode === "block"
              ? '<p><span class="math-tex">' +
                  wrapLatex(data.latex, mode) +
                  "</span></p>"
              : '<span class="math-tex">' +
                  wrapLatex(data.latex, mode) +
                  "</span>"
          );
          renderMath();
          api.close();
        },
        onOpen: function (api) {
          const data = api.getData();
          const preview = document.getElementById(previewId);
          const mode = data.mode || "inline";
          renderPreview(preview, data.latex, mode);
        },
      });
    },
  });
});
